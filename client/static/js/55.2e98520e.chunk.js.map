{"version":3,"file":"static/js/55.2e98520e.chunk.js","mappings":"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","sources":["webpack://client/./src/entities/Task/ui/TaskRow/style.module.sass?b1fa","webpack://client/./src/entities/Task/ui/Task/style.module.sass?3709","webpack://client/./src/shared/ui/ToggleButton/style.module.sass?5485","shared/ui/ToggleButton/index.tsx","entities/Task/ui/Task/index.tsx","entities/Task/ui/TaskRow/index.tsx","webpack://client/./src/pages/ToDo/style.module.sass?cb35","pages/ToDo/index.tsx","webpack://client/./src/shared/ui/Text/style.module.sass?05b8","shared/ui/Text/index.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"task__container\":\"style_task__container__X0tUc\"};","// extracted by mini-css-extract-plugin\nexport default {\"task\":\"style_task__fsX6+\",\"name\":\"style_name__vehv5\",\"_completed\":\"style__completed__LpEq+\",\"_overdue\":\"style__overdue__M5Nud\",\"description\":\"style_description__stuMv\"};","// extracted by mini-css-extract-plugin\nexport default {\"toggle\":\"style_toggle__9-Otq\",\"button\":\"style_button__eTFLm\",\"_regular\":\"style__regular__FAMgo\",\"_completed\":\"style__completed__pW+Zn\",\"_overdue\":\"style__overdue__EDsBf\"};","import { FC } from \"react\";\r\nimport styles from \"./style.module.sass\";\r\nimport Text from \"../Text\";\r\n\r\ninterface ToggleButtonProps {\r\n  style?: string;\r\n  onClick?: () => void;\r\n  type?: string;\r\n}\r\n\r\nconst ToggleButton: FC<ToggleButtonProps> = ({\r\n  style,\r\n  onClick,\r\n  type = \"_regular\",\r\n}) => {\r\n  function getTypeStyle(type: string) {\r\n    switch (type) {\r\n      case \"completed\": {\r\n        return styles._completed;\r\n      }\r\n      case \"overdue\": {\r\n        return styles._overdue;\r\n      }\r\n      default: {\r\n        return styles._regular;\r\n      }\r\n    }\r\n  }\r\n  return (\r\n    <div className={[style, getTypeStyle(type), styles.toggle].join(\" \")}>\r\n      <button className={styles.button} onClick={onClick}>\r\n        {type === \"completed\" ? <Text>âœ“</Text> : <></>}\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ToggleButton;\r\n","import { FC, useState } from \"react\";\r\nimport styles from \"./style.module.sass\";\r\nimport ToggleButton from \"shared/ui/ToggleButton\";\r\nimport Text from \"shared/ui/Text\";\r\n\r\ninterface TaskProps {\r\n  id: number;\r\n  description: string;\r\n  name: string;\r\n  status: number;\r\n  dedline: Date;\r\n  completed: Boolean;\r\n  isFull?: boolean;\r\n}\r\n\r\nconst Task: FC<TaskProps> = ({\r\n  id,\r\n  name,\r\n  description,\r\n  status,\r\n  dedline,\r\n  completed,\r\n  isFull = false,\r\n}) => {\r\n  const [full, setFull] = useState(isFull);\r\n  return (\r\n    <div key={id} className={[styles.task, completed].join(\" \")}>\r\n      <ToggleButton type={completed ? \"_completed\" : \"\"} />\r\n      <Text style={styles.name} onClick={() => setFull(!full)}>\r\n        {name}\r\n      </Text>\r\n      <Text type=\"text_small\" style={styles.dedline}>\r\n        {String(dedline)}\r\n      </Text>\r\n      {full && <Text style={styles.description}>{description}</Text>}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Task;\r\n","import { FC } from \"react\";\r\nimport styles from \"./style.module.sass\";\r\nimport Task from \"../Task\";\r\n\r\ninterface TaskProps {\r\n  id: number;\r\n  name: string;\r\n  description: string;\r\n  status: number;\r\n  dedline: Date;\r\n  comleted: boolean;\r\n}\r\n\r\ninterface TasksRowProps {\r\n  tasks: TaskProps[] | undefined;\r\n}\r\n\r\nconst TasksRow: FC<TasksRowProps> = ({ tasks }) => {\r\n  return (\r\n    <div className={styles.task__container}>\r\n      {tasks?.map((t) => (\r\n        <Task\r\n          id={t.id}\r\n          name={t.name}\r\n          description={t.description}\r\n          status={t.status}\r\n          dedline={t.dedline}\r\n          completed={false}\r\n        ></Task>\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TasksRow;\r\n","// extracted by mini-css-extract-plugin\nexport default {\"taskRow\":\"style_taskRow__M9nt3\"};","import TasksRow from \"entities/Task/ui/TaskRow\";\r\nimport styles from \"./style.module.sass\";\r\nimport { useEffect, useState } from \"react\";\r\ninterface TaskProps {\r\n  id: number;\r\n  name: string;\r\n  description: string;\r\n  status: number;\r\n  dedline: Date;\r\n  comleted: boolean;\r\n}\r\n\r\nfunction ToDo() {\r\n  const [tasks, setTasks] = useState<TaskProps[]>([]);\r\n  useEffect(() => {\r\n    try {\r\n      fetch(\"http://localhost//api/posts/all\")\r\n        .then((response) => response.json())\r\n        .then((data) => {\r\n          setTasks(data);\r\n          console.log(data);\r\n        })\r\n        .catch((error) => console.log(error));\r\n    } catch (error) {\r\n      console.error(error);\r\n    }\r\n  }, []);\r\n\r\n  return (\r\n    <div className={styles.taskRow}>\r\n      <TasksRow tasks={tasks} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ToDo;\r\n","// extracted by mini-css-extract-plugin\nexport default {\"h1\":\"style_h1__qWyE6\",\"h2\":\"style_h2__HFL3w\",\"h3\":\"style_h3__Z0ICY\",\"h4\":\"style_h4__J-Y7r\",\"h5\":\"style_h5__uIksC\",\"text\":\"style_text__tl--d\",\"text_small\":\"style_text_small__dIkeN\",\"_accent\":\"style__accent__CN02M\"};","import { FC } from \"react\";\r\nimport styles from \"./style.module.sass\";\r\n\r\ninterface TextProps {\r\n  children?: React.ReactNode;\r\n  style?: string;\r\n  type?: \"h1\" | \"h2\" | \"h3\" | \"h4\" | \"h5\" | \"text\" | \"text_small\";\r\n  accent?: boolean;\r\n  onClick?: () => void;\r\n}\r\n\r\nconst Text: FC<TextProps> = ({\r\n  children,\r\n  style,\r\n  type = \"text\",\r\n  accent = false,\r\n  onClick,\r\n}) => {\r\n  function getTypeStyle(\r\n    type: \"h1\" | \"h2\" | \"h3\" | \"h4\" | \"h5\" | \"text\" | \"text_small\"\r\n  ) {\r\n    switch (type) {\r\n      case \"h1\": {\r\n        return styles.h1;\r\n      }\r\n      case \"h2\": {\r\n        return styles.h2;\r\n      }\r\n      case \"h3\": {\r\n        return styles.h3;\r\n      }\r\n      case \"h4\": {\r\n        return styles.h4;\r\n      }\r\n      case \"h5\": {\r\n        return styles.h5;\r\n      }\r\n      case \"text\": {\r\n        return styles.text;\r\n      }\r\n      case \"text_small\": {\r\n        return styles.text_small;\r\n      }\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div\r\n      onClick={onClick}\r\n      className={[style, getTypeStyle(type), accent && styles._accent].join(\r\n        \" \"\r\n      )}\r\n    >\r\n      {children}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Text;\r\n"],"names":["_ref","style","onClick","_ref$type","type","_jsx","className","styles","_completed","_overdue","_regular","getTypeStyle","toggle","join","children","button","Text","_Fragment","id","name","description","dedline","status","completed","_ref$isFull","isFull","_useState","useState","_useState2","_slicedToArray","full","setFull","_jsxs","task","ToggleButton","String","tasks","map","t","Task","setTasks","useEffect","fetch","then","response","json","data","console","log","catch","error","TasksRow","_ref$accent","accent"],"sourceRoot":""}